---
description:
globs:
alwaysApply: false
---
Rule Name: infrastructure-layer
Description: 
# Infrastructure Layer Guide

The Infrastructure Layer implements interfaces defined by domain and provides external service adapters.

## Key Principles

1. **Interface Implementation**: Implements domain interfaces
2. **Adapter Pattern**: Adapts external tools to domain needs
3. **Technical Concerns**: Handles database, APIs, filesystem
4. **Isolation**: Isolates external dependencies from domain

## Structure

```
infrastructure/
├── repositories/         # Repository implementations
│   ├── baseRepoImpl.ts   # Base repository implementation
│   ├── entityRepoImpl.ts # Entity-specific repository
│   └── queryBuilders/    # Query utilities
├── services/             # External service adapters
├── persistence/          # Database related code
└── config/               # Infrastructure configuration
```

## Component Implementation

### Repository Implementations

1. **Interface Adherence**: Implement domain repository interfaces
2. **Dependency Injection**: External dependencies via constructor
3. **Domain Mapping**: Map from persistence to domain models
4. **Error Translation**: Convert technical errors to domain errors

```typescript
export class RepositoryImpl implements Repository {
  constructor(private dataSource: DataSource) {}
  
  async findById(id: string): Promise<Entity | null> {
    try {
      const data = await this.dataSource.query(/* ... */);
      return data ? Mapper.toDomain(data) : null;
    } catch (error) {
      throw new RepositoryError('Message', { cause: error });
    }
  }
}
```

### Query Builders

1. **Builder Pattern**: Method chaining for query construction
2. **Type Safety**: Strong typing for queries
3. **Composable**: Build complex queries from parts
4. **Conditional Logic**: Only apply conditions when needed

### Base Repository

1. **Common Operations**: Implement shared functionality
2. **Error Handling**: Consistent error management
3. **Connection Management**: Handle database connections
4. **Transaction Support**: Implement transaction patterns

### External Service Adapters

1. **Domain Interface**: Implement domain service interfaces
2. **Technical Details**: Handle authentication, serialization
3. **Error Mapping**: Translate external errors to domain errors
4. **Configuration**: Handle service configuration

## Best Practices

1. **Domain Independence**: Hide implementation details
2. **Connection Pooling**: Reuse connections efficiently
3. **Parameterized Queries**: Prevent SQL injection
4. **Caching Strategy**: Implement appropriate caching
5. **Metrics/Logging**: Add operational visibility
6. **Retries**: Handle transient failures

## Reference
For detailed implementation guidelines, see [src/docs/infrastructure-layer-sop.md](mdc:src/docs/infrastructure-layer-sop.md)
