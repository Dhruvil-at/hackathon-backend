---
description:
globs:
alwaysApply: false
---
Rule Name: domain-layer
Description: 
# Domain Layer Guide

The Domain Layer is the core of the clean architecture, containing business entities, rules, and domain services.

## Key Principles

1. **Independence**: No dependencies on other layers or external frameworks
2. **Business Logic Focus**: Contains pure business logic that is technology-agnostic
3. **Rich Domain Model**: Entities contain behavior, not just properties
4. **Immutability**: Prefer immutable objects where possible

## Structure

```
/domain
  /entities       # Core business objects and value objects
  /interfaces     # Repository and service interfaces
  /services       # Domain service implementations
```

## Component Implementation

### Entities

1. **Property Bag Pattern**:
   ```typescript
   export interface EntityProps {
     id: string;
     // Other properties
   }

   export class Entity {
     private props: EntityProps;
     
     private constructor(props: EntityProps) {
       this.props = props;
     }

     static create(props: EntityProps): Entity {
       // Validation logic
       return new Entity(props);
     }

     // Getters and behavior methods
   }
   ```

2. **Static Factory Methods**: Use for creating validated instances
3. **Encapsulation**: Make props private with public getter methods
4. **Business Rules**: Implement as methods on entities

### Domain Interfaces

1. **Repository Interfaces**: Define contracts for data access
2. **Service Interfaces**: Define contracts for domain operations
3. **Technology-Agnostic**: No implementation details

### Domain Services

1. **Interface Implementation**: Implement domain service interfaces
2. **Focus on Business Logic**: No infrastructure concerns
3. **Entity Coordination**: Handle operations spanning multiple entities

## Best Practices

1. **Ubiquitous Language**: Use business terminology consistently
2. **Validation at Creation**: Validate entities at creation time
3. **No Setters**: Use methods that express domain actions
4. **Domain Events**: Use events for cross-entity communication
5. **Value Objects**: Use for immutable concepts without identity

## Anti-patterns to Avoid

1. **Anemic Domain Model**: Entities with no behavior
2. **Infrastructure Leakage**: Domain with technical dependencies
3. **Direct Property Access**: Exposing internal state
4. **Service Overuse**: Using services for logic that belongs in entities

## Reference
For detailed implementation guidelines, see [src/docs/DOMAIN_LAYER_SOP.md](mdc:src/docs/DOMAIN_LAYER_SOP.md)
