---
description: 
globs: 
alwaysApply: false
---
# Layered Architecture Guide

This codebase follows a Clean Architecture approach that separates concerns into distinct layers.

## Core Principles

1. **Independence of Frameworks**: The architecture doesn't depend on specific libraries or frameworks
2. **Testability**: Business rules can be tested without UI, database, or external elements
3. **Independence of UI, Database, and External Agencies**: Business rules are not bound to external implementations

## Layer Structure

### 1. Domain Layer (Innermost)
- Contains enterprise business rules and entities
- Has no dependencies on other layers
- Uses property bag pattern with private properties and public getters
- Implements validation in static factory methods

### 2. Application Layer
- Contains use cases that orchestrate domain entities
- Defines input/output DTOs for layer communication
- Uses factories to create and configure use cases
- Implements application-specific business logic
- Includes additional validation for use case inputs

### 3. Repository Layer
- Defines interfaces for data access
- Acts as contracts for infrastructure implementations
- Provides base repository interface and specialized extensions

### 4. Infrastructure Layer
- Implements repository interfaces
- Contains adapters for external services
- Includes database access logic
- Uses query builders for complex data operations

### 5. Presentation Layer
- Handles HTTP requests and responses
- Contains controllers with static methods
- Implements input validation using libraries like Joi
- Defines routes with validators
- Uses static controller methods with binding
- Throws appropriate errors for centralized handling

### 6. Shared Layer
- Contains cross-cutting concerns
- Houses centralized error handling
- Provides utilities and common services
- Includes application-level middleware

## Module Organization

- Each module is organized by feature domain (e.g., users, products)
- No individual module index files, instead use a centralized modules/index.ts
- The main modules index file imports all routes and exports them
- Routes are mounted with appropriate base paths
- Error handling is implemented at the application level, not in individual modules

## Implementation Process

1. Define domain entities, enums, and interfaces first
2. Create repository and service interfaces
3. Implement use cases in the application layer
4. Create infrastructure adapters
5. Implement validation in the presentation layer
6. Create controllers with static methods
7. Define routes with validation middleware
8. Configure the central modules index file
9. Implement application-level error handling

## Router Format
Routes should be defined using validators and exported directly:
```javascript
import { Router } from 'express';
import { createValidator } from 'express-joi-validation';
import validationSchema from '../validation/schema.validation';
import { Controller } from '../controllers/controller';

const router = Router();
const validator = createValidator({ passError: true });

router.get(
  '/endpoint',
  validator.query(validationSchema.operation),
  Controller.method.bind(Controller)
);

export { router };
```

## Error Handling
Error handling is centralized at the application level:
```javascript
// In app.ts, after all routes are defined
app.use(routes);
app.use(errorHandler);
```

## Reference
For detailed implementation guidelines, see [src/docs/layered-architecture-SOP.md](mdc:src/docs/layered-architecture-SOP.md)
